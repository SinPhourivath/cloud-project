name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1  # Changed to your RDS region
        
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: MYSQL_HOST,MYSQL_USER,MYSQL_PASSWORD,MYSQL_DATABASE
          script: |
            # Add Docker permissions
            sudo usermod -aG docker $USER
            sudo systemctl restart docker
            
            # Setup application directory
            cd /home/ec2-user
            sudo rm -rf todo-app
            sudo mkdir -p todo-app
            sudo chown -R ec2-user:ec2-user todo-app
            cd todo-app
            
            # Clone repository
            git clone https://github.com/g3-cloud-computing-project/cloud-computing-project.git .
            
            # Create .env file with the correct values
            cat > .env << EOF
            MYSQL_HOST=${MYSQL_HOST}
            MYSQL_USER=${MYSQL_USER}
            MYSQL_PASSWORD=${MYSQL_PASSWORD}
            MYSQL_DATABASE=${MYSQL_DATABASE}
            EOF
            
            # Verify .env file was created
            ls -la .env
            
            # Stop and remove existing containers
            sudo docker compose down || true
            sudo docker rm -f todo-app || true
            
            # Build and start with docker
            sudo docker run -d \
              --name todo-app \
              -p 3000:3000 \
              -v $(pwd):/app \
              -v /app/node_modules \
              --env-file .env \
              node:18-alpine \
              sh -c "cd /app && yarn install && yarn run dev"
            
            # Wait for application to start
            sleep 10
            
            # Debug commands
            echo "Checking container status..."
            sudo docker ps
            echo "Checking container logs..."
            sudo docker logs todo-app
            echo "Checking if application is responding..."
            curl -v localhost:3000